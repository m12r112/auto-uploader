import os
import json
import random
import requests
from pathlib import Path
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from googleapiclient.errors import HttpError

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1) ŸÖÿ¨ŸÑÿØ ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑŸÖÿ≠ŸÑŸä ŸÑŸÑŸÅŸäÿØŸäŸàŸáÿßÿ™
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
VIDEO_ROOT = Path("videos")
VIDEO_ROOT.mkdir(exist_ok=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2) ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ŸàÿßÿÆÿ™Ÿäÿßÿ± ŸÉŸÑŸÖÿ™ŸäŸÜ ÿπÿ¥Ÿàÿßÿ¶Ÿäÿ™ŸäŸÜ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
with open("keywords.json", encoding="utf-8") as f:
    keywords = json.load(f)["keywords"]
selected_keywords = random.sample(keywords, k=2)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3) ŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑÿ®Ÿäÿ¶ÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PEXELS_API_KEY = os.environ.get("PEXELS_API_KEY")
print(
    f"üîê DEBUG: PEXELS_API_KEY begins with: {PEXELS_API_KEY[:6]}..."
    if PEXELS_API_KEY else
    "‚ùå PEXELS_API_KEY not found in env"
)
if not PEXELS_API_KEY:
    raise Exception("‚ùå PEXELS_API_KEY not found in environment.")

DRIVE_FOLDER_ID = os.environ.get("DRIVE_FOLDER_ID")
if not DRIVE_FOLDER_ID:
    raise Exception("‚ùå DRIVE_FOLDER_ID not found in environment.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 4) ÿ•ÿπÿØÿßÿØ Pexels API
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PEXELS_API_URL = "https://api.pexels.com/videos/search"
headers = {"Authorization": PEXELS_API_KEY}

def fetch_video_url(keyword: str) -> str | None:
    """ÿ¨ŸÑÿ® ÿ±ÿßÿ®ÿ∑ ŸÅŸäÿØŸäŸà ÿπŸÖŸàÿØŸä ŸÖŸÜ Pexelsÿå ÿ£Ÿà ÿ•ÿ±ÿ¨ÿßÿπ None ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸèÿπÿ´ÿ± ÿπŸÑŸäŸá."""
    print(f"üîç [Pexels] Searching for '{keyword}' ‚Ä¶")
    params = {"query": keyword, "per_page": 20}
    try:
        resp = requests.get(PEXELS_API_URL, headers=headers, params=params, timeout=20)
        resp.raise_for_status()
    except Exception as e:
        print(f"‚ùå Pexels API error: {e}")
        return None

    data = resp.json()
    candidates: list[str] = []
    for video in data.get("videos", []):
        for file in video.get("video_files", []):
            w, h = file.get("width"), file.get("height")
            # ÿ¥ÿ±ÿ∑ ÿπŸÖŸàÿØŸä ‚â• 720p
            if w and h and h > w and h >= 720:
                candidates.append(file["link"])

    if candidates:
        chosen = random.choice(candidates)
        print(f"üîó Selected vertical video: {chosen}")
        return chosen

    print(f"‚ùå No vertical video found for '{keyword}'")
    return None

def download_video(url: str, save_path: Path) -> bool:
    """ÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑŸÅŸäÿØŸäŸà ÿ•ŸÑŸâ ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑŸÖÿ≠ÿØÿØ."""
    print(f"‚¨áÔ∏è Downloading ‚Üí {save_path}")
    try:
        r = requests.get(url, stream=True, timeout=60)
        r.raise_for_status()
        with open(save_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        print(f"‚úÖ Saved: {save_path.name}")
        return True
    except Exception as e:
        print(f"‚ùå Download failed: {e}")
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 5) ÿ£ÿØŸàÿßÿ™ Google Drive
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_or_create_folder(service, parent_id: str, name: str) -> str:
    query = (
        f"mimeType='application/vnd.google-apps.folder' "
        f"and name='{name}' and '{parent_id}' in parents and trashed=false"
    )
    res = service.files().list(q=query, spaces="drive", fields="files(id,name)").execute()
    if res.get("files"):
        return res["files"][0]["id"]

    meta = {
        "name": name,
        "mimeType": "application/vnd.google-apps.folder",
        "parents": [parent_id],
    }
    created = service.files().create(body=meta, fields="id").execute()
    return created["id"]

def upload_to_drive(local_path: Path, parent_id: str, keyword: str) -> None:
    """ÿ±ŸÅÿπ ÿßŸÑŸÖŸÑŸÅ ÿ•ŸÑŸâ Google Drive ÿØÿßÿÆŸÑ ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑŸÖŸÜÿßÿ≥ÿ®."""
    creds = service_account.Credentials.from_service_account_file(
        "service_account.key",
        scopes=["https://www.googleapis.com/auth/drive"],
    )
    service = build("drive", "v3", credentials=creds)

    try:
        videos_root = get_or_create_folder(service, parent_id, "Videos")
        keyword_folder = get_or_create_folder(service, videos_root, keyword)
    except HttpError as e:
        print(f"‚ùå Folder creation error: {e}")
        return

    meta = {"name": local_path.name, "parents": [keyword_folder]}
    media = MediaFileUpload(local_path, mimetype="video/mp4")
    try:
        uploaded = service.files().create(body=meta, media_body=media, fields="id").execute()
        print(f"‚úÖ Uploaded to Drive (ID={uploaded['id']}) ‚Üí Videos/{keyword}/{local_path.name}")
    except HttpError as e:
        print(f"‚ùå Upload error: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 6) ÿßŸÑÿ≠ŸÑŸÇÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    print(f"üìÇ Parent Drive folder ID = {DRIVE_FOLDER_ID}")
    for keyword in selected_keywords:
        print(f"\nüîç Keyword: {keyword}")
        url = fetch_video_url(keyword)
        if not url:
            continue

        keyword_dir = VIDEO_ROOT / keyword
        keyword_dir.mkdir(parents=True, exist_ok=True)
        fname = f"{keyword}_{random.randint(1000,9999)}.mp4"
        save_to = keyword_dir / fname

        if download_video(url, save_to):
            upload_to_drive(save_to, DRIVE_FOLDER_ID, keyword)

if __name__ == "__main__":
    main()
